{
  "version": 3,
  "sources": ["../src/preload.ts", "../src/utils/IpcEvents.ts", "../src/VencordNative.ts"],
  "sourcesContent": ["import electron, { contextBridge, webFrame, ipcRenderer } from \"electron\";\nimport { readFileSync } from \"fs\";\nimport { join } from \"path\";\nimport VencordNative from \"./VencordNative\";\nimport IpcEvents from \"./utils/IpcEvents\";\n\nif (electron.desktopCapturer === void 0) {\n    // Fix for desktopCapturer being main only in Electron 17+\n    // Discord accesses this in discord_desktop_core (DiscordNative.desktopCapture.getDesktopCaptureSources)\n    // and errors with cannot \"read property getSources() of undefined\"\n    // see discord_desktop_core/app/discord_native/renderer/desktopCapture.js\n    const electronPath = require.resolve(\"electron\");\n    delete require.cache[electronPath]!.exports;\n    require.cache[electronPath]!.exports = {\n        ...electron,\n        desktopCapturer: {\n            getSources: opts => ipcRenderer.invoke(IpcEvents.GET_DESKTOP_CAPTURE_SOURCES, opts)\n        }\n    };\n}\n\ncontextBridge.exposeInMainWorld(\"VencordNative\", VencordNative);\n\nwebFrame.executeJavaScript(readFileSync(join(__dirname, \"renderer.js\"), \"utf-8\"));\n\nrequire(process.env.DISCORD_PRELOAD!);\n", "type Enum<T extends Record<string, string>> = {\n    [k in keyof T]: T[k];\n} & { [v in keyof T as T[v]]: v; };\n\nfunction strEnum<T extends Record<string, string>>(obj: T): T {\n    const o = {} as T;\n    for (const key in obj) {\n        o[key] = obj[key] as any;\n        o[obj[key]] = key as any;\n    }\n    return Object.freeze(o);\n}\n\nexport default strEnum({\n    QUICK_CSS_UPDATE: \"VencordQuickCssUpdate\",\n    GET_QUICK_CSS: \"VencordGetQuickCss\",\n    GET_SETTINGS_DIR: \"VencordGetSettingsDir\",\n    GET_SETTINGS: \"VencordGetSettings\",\n    SET_SETTINGS: \"VencordSetSettings\",\n    OPEN_EXTERNAL: \"VencordOpenExternal\",\n    OPEN_QUICKCSS: \"VencordOpenQuickCss\",\n    GET_UPDATES: \"VencordGetUpdates\",\n    GET_REPO: \"VencordGetRepo\",\n    GET_HASHES: \"VencordGetHashes\",\n    UPDATE: \"VencordUpdate\",\n    BUILD: \"VencordBuild\",\n    GET_DESKTOP_CAPTURE_SOURCES: \"VencordGetDesktopCaptureSources\"\n} as const);\n", "import IPC_EVENTS from \"./utils/IpcEvents\";\nimport { IpcRenderer, ipcRenderer } from \"electron\";\n\nfunction assertEventAllowed(event: string) {\n    if (!(event in IPC_EVENTS)) throw new Error(`Event ${event} not allowed.`);\n}\nexport default {\n    getVersions: () => process.versions,\n    ipc: {\n        send(event: string, ...args: any[]) {\n            assertEventAllowed(event);\n            ipcRenderer.send(event, ...args);\n        },\n        sendSync<T = any>(event: string, ...args: any[]): T {\n            assertEventAllowed(event);\n            return ipcRenderer.sendSync(event, ...args);\n        },\n        on(event: string, listener: Parameters<IpcRenderer[\"on\"]>[1]) {\n            assertEventAllowed(event);\n            ipcRenderer.on(event, listener);\n        },\n        off(event: string, listener: Parameters<IpcRenderer[\"off\"]>[1]) {\n            assertEventAllowed(event);\n            ipcRenderer.off(event, listener);\n        },\n        invoke<T = any>(event: string, ...args: any[]): Promise<T> {\n            assertEventAllowed(event);\n            return ipcRenderer.invoke(event, ...args);\n        }\n    }\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,mBAA+D;AAC/D,gBAA6B;AAC7B,kBAAqB;;;ACErB,SAAS,QAA0C,KAAW;AAC1D,QAAM,IAAI,CAAC;AACX,aAAW,OAAO,KAAK;AACnB,MAAE,OAAO,IAAI;AACb,MAAE,IAAI,QAAQ;AAAA,EAClB;AACA,SAAO,OAAO,OAAO,CAAC;AAC1B;AAEA,IAAO,oBAAQ,QAAQ;AAAA,EACnB,kBAAkB;AAAA,EAClB,eAAe;AAAA,EACf,kBAAkB;AAAA,EAClB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,eAAe;AAAA,EACf,eAAe;AAAA,EACf,aAAa;AAAA,EACb,UAAU;AAAA,EACV,YAAY;AAAA,EACZ,QAAQ;AAAA,EACR,OAAO;AAAA,EACP,6BAA6B;AACjC,CAAU;;;AC1BV,sBAAyC;AAEzC,SAAS,mBAAmB,OAAe;AACvC,MAAI,EAAE,SAAS;AAAa,UAAM,IAAI,MAAM,SAAS,oBAAoB;AAC7E;AACA,IAAO,wBAAQ;AAAA,EACX,aAAa,MAAM,QAAQ;AAAA,EAC3B,KAAK;AAAA,IACD,KAAK,UAAkB,MAAa;AAChC,yBAAmB,KAAK;AACxB,kCAAY,KAAK,OAAO,GAAG,IAAI;AAAA,IACnC;AAAA,IACA,SAAkB,UAAkB,MAAgB;AAChD,yBAAmB,KAAK;AACxB,aAAO,4BAAY,SAAS,OAAO,GAAG,IAAI;AAAA,IAC9C;AAAA,IACA,GAAG,OAAe,UAA4C;AAC1D,yBAAmB,KAAK;AACxB,kCAAY,GAAG,OAAO,QAAQ;AAAA,IAClC;AAAA,IACA,IAAI,OAAe,UAA6C;AAC5D,yBAAmB,KAAK;AACxB,kCAAY,IAAI,OAAO,QAAQ;AAAA,IACnC;AAAA,IACA,OAAgB,UAAkB,MAAyB;AACvD,yBAAmB,KAAK;AACxB,aAAO,4BAAY,OAAO,OAAO,GAAG,IAAI;AAAA,IAC5C;AAAA,EACJ;AACJ;;;AFxBA,IAAI,iBAAAC,QAAS,oBAAoB,QAAQ;AAKrC,QAAM,eAA+B;AACrC,SAAO,QAAQ,MAAM,cAAe;AACpC,UAAQ,MAAM,cAAe,UAAU;AAAA,IACnC,GAAG,iBAAAA;AAAA,IACH,iBAAiB;AAAA,MACb,YAAY,UAAQ,6BAAY,OAAO,kBAAU,6BAA6B,IAAI;AAAA,IACtF;AAAA,EACJ;AACJ;AAEA,+BAAc,kBAAkB,iBAAiB,qBAAa;AAE9D,0BAAS,sBAAkB,4BAAa,kBAAK,WAAW,aAAa,GAAG,OAAO,CAAC;AAEhF,QAAQ,QAAQ,IAAI;",
  "names": ["import_electron", "electron"]
}
