/*
 * Vencord, a modification for Discord's desktop app
 * Copyright (c) 2023 Vendicated and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

import { classNameFactory } from "@api/Styles";


export const cl = classNameFactory("vc-trans-");

interface TranslationData {
    src: string;
    sentences: {
        // üè≥Ô∏è‚Äç‚ößÔ∏è
        trans: string;
    }[];
}

export interface TranslationValue {
    src: string;
    text: string;
}

export function encryptDecryptAPI(kind: "encrypt" | "decrypt", text: string): Promise<string> {
    return fetch(`https://api.dragzte.me/${kind}`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ text })
    })
        .then(response => {
            console.log(response.text);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => data.text)
        .catch(error => {
            console.error("Failed to fetch from API:", error);
            return text;
        });
}

export async function translate(kind: "received" | "sent", text: string, version: number): Promise<TranslationValue> {
    const lettersv1 = {
        "a": "‡™Ü",
        "b": "‡≠à",
        "c": "‡Æâ",
        "d": "‡Øã",
        "e": "‡∞ï",
        "f": "‡∑¥",
        "g": "‡∏™",
        "h": "‡∏ø",
        "i": "‡∫±",
        "j": "‡ºÉ",
        "k": "‡º∫",
        "l": "‡º∞",
        "m": "‡ºñ",
        "n": "‡ΩÉ",
        "o": "‡Ωú",
        "p": "‡Ω≤",
        "q": "‡æ®",
        "r": "‡øÑ",
        "s": "‡æ∞",
        "t": "‡æ¨",
        "u": "·Ä™",
        "v": "·Äø",
        "w": "·Åö",
        "x": "·Ç†",
        "y": "‡æõ",
        "z": "‡Ω†",
        ":": "‡≤π",
        " ": "‡øê",
        "1": "‡ªë",
        "2": "‡ªí",
        "3": "‡ªì",
        "4": "‡ªî",
        "5": "‡ªï",
        "6": "‡ªñ",
        "7": "‡ªó",
        "8": "‡ªò",
        "9": "‡ªô",
        "0": "‡ªê",
        "!": "·Ü∞",
        "@": "·âß",
        "#": "·äó",
        "$": "·ãò",
        "%": "·åô",
        "^": "·çö",
        "&": "·éß",
        "*": "·èö",
        "(": "·êß",
        ")": "·ë¶",
        "-": "·îÜ",
        "_": "·ïÇ",
        "=": "·ñÜ",
        "+": "·ñº",
        "[": "·óÑ",
        "]": "·óø",
        "{": "·òá",
        "}": "·òø",
        ";": "·ôà",
        "'": "·ôø",
        '"': "·öÜ",
        "<": "·öæ",
        ">": "·õö",
        ",": "·õø",
        ".": "·úÇ",
        "/": "·úø",
        "?": "·ùÜ",
        "`": "·ùæ",
        "~": "·ûà",
        "A": "·ûâ",
        "B": "·ûä",
        "C": "·ûã",
        "D": "·ûå",
        "E": "·ûç",
        "F": "·ûé",
        "G": "·ûè",
        "H": "·ûê",
        "I": "·ûë",
        "J": "·ûí",
        "K": "·ûì",
        "L": "·ûî",
        "M": "·ûï",
        "N": "·ûñ",
        "O": "·ûó",
        "P": "·ûò",
        "Q": "·ûô",
        "R": "·ûö",
        "S": "·ûõ",
        "T": "·ûú",
        "U": "·ûù",
        "V": "·ûû",
        "W": "·ûü",
        "X": "·û†",
        "Y": "·û°",
        "Z": "·û¢"

    };

    const lettersv2 = {
        "a": "ÿ±",
        "b": "ÿ≤",
        "c": "ÿ≥",
        "d": "ÿ¥",
        "e": "ÿµ",
        "f": "ÿ∂",
        "g": "ÿ∑",
        "h": "ÿ∏",
        "i": "ÿπ",
        "j": "ÿ∫",
        "k": "ÿª",
        "l": "ÿº",
        "m": "ÿΩ",
        "n": "ÿæ",
        "o": "ÿø",
        "p": "ŸÄ",
        "q": "ŸÅ",
        "r": "ŸÇ",
        "s": "ŸÉ",
        "t": "ŸÑ",
        "u": "ŸÖ",
        "v": "ŸÜ",
        "w": "Ÿá",
        "x": "",
        "y": "Ÿâ",
        "z": "",
        " ": "◊∞",
        ",": "◊º",
        "?": "ÿè",
    };

    const cubes = {
        "a": "Ôà°",
        "b": "Ôà¢",
        "c": "Ôà£",
        "d": "üü®",
        "e": "Ôà•",
        "f": "Ôà¶",
        "g": "Ôàß",
        "h": "Ôà®",
        "i": "Ôà©",
        "j": "üüß",
        "k": "Ôà´",
        "l": "Ôà¨",
        "m": "Ôà≠",
        "n": "ÔàÆ",
        "o": "ÔàØ",
        "p": "üü™",
        "q": "üüß",
        "r": "Ôà≤",
        "s": "Ôà≥",
        "t": "Ôà¥",
        "u": "Ôàµ",
        "v": "üü®",
        "w": "Ôà∑",
        "x": "üüß",
        "y": "Ôàπ",
        "z": "üü¶",
        " ": "Ôá†",
        "?": "Ôáø",
        "I": "Ôàâ",
    };

    let translatedText = "";

    const letters = version === 1 ? lettersv1 : version === 2 ? lettersv2 : cubes;


    if (version === 1) {
        return encryptDecryptAPI(kind === "sent" ? "encrypt" : "decrypt", text)
            .then(translatedText => {
                return {
                    src: kind,
                    text: translatedText + "‚Äã"
                };
            });
    } else {

        if (kind === "sent") {
            translatedText = await encryptDecryptAPI(kind === "sent" ? "encrypt" : "decrypt", text);
        } else {
            const reversedLetters = Object.entries(letters).reduce((acc, [key, value]) => ({ ...acc, [value as string]: key }), {});
            translatedText = text.split("").map(char => reversedLetters[char] || char).join("");
        }
    }

    return {
        src: kind,
        text: translatedText + "‚Äã"
    };
}

export function shouldTranslate(text: string): boolean {
    if (text.includes("‚Äã")) {
        return true;

    }
    return false;
}
