/*
 * Vencord, a modification for Discord's desktop app
 * Copyright (c) 2023 Vendicated and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

import { classNameFactory } from "@api/Styles";


export const cl = classNameFactory("vc-trans-");

interface TranslationData {
    src: string;
    sentences: {
        // üè≥Ô∏è‚Äç‚ößÔ∏è
        trans: string;
    }[];
}

export interface TranslationValue {
    src: string;
    text: string;
}

export async function translate(kind: "received" | "sent", text: string, version: number): Promise<TranslationValue> {
    const lettersv1 = {
        "a": "‡™Ü",
        "b": "‡≠à",
        "c": "‡Æâ",
        "d": "‡Øã",
        "e": "‡∞ï",
        "f": "‡∑¥",
        "g": "‡∏™",
        "h": "‡∏ø",
        "i": "‡∫±",
        "j": "‡ºÉ",
        "k": "‡º∫",
        "l": "‡º∞",
        "m": "‡ºñ",
        "n": "‡ΩÉ",
        "o": "‡Ωú",
        "p": "‡Ω≤",
        "q": "‡æ®",
        "r": "‡øÑ",
        "s": "‡æ∞",
        "t": "‡æ¨",
        "u": "·Ä™",
        "v": "·Äø",
        "w": "·Åö",
        "x": "·Ç†",
        "y": "‡æõ",
        "z": "‡Ω†",
        ":": "‡≤π",
        " ": "‡øê",
        "1": "‡ªë",
        "2": "‡ªí",
        "3": "‡ªì",
        "4": "‡ªî",
        "5": "‡ªï",
        "6": "‡ªñ",
        "7": "‡ªó",
        "8": "‡ªò",
        "9": "‡ªô",
        "0": "‡ªê",
        "!": "·Ü∞",
        "@": "·âß",
        "#": "·äó",
        "$": "·ãò",
        "%": "·åô",
        "^": "·çö",
        "&": "·éß",
        "*": "·èö",
        "(": "·êß",
        ")": "·ë¶",
        "-": "·îÜ",
        "_": "·ïÇ",
        "=": "·ñÜ",
        "+": "·ñº",
        "[": "·óÑ",
        "]": "·óø",
        "{": "·òá",
        "}": "·òø",
        ";": "·ôà",
        "'": "·ôø",
        '"': "·öÜ",
        "<": "·öæ",
        ">": "·õö",
        ",": "·õø",
        ".": "·úÇ",
        "/": "·úø",
        "?": "·ùÜ",
        "`": "·ùæ",
        "~": "·ûà",
        "A": "·ûâ",
        "B": "·ûä",
        "C": "·ûã",
        "D": "·ûå",
        "E": "·ûç",
        "F": "·ûé",
        "G": "·ûè",
        "H": "·ûê",
        "I": "·ûë",
        "J": "·ûí",
        "K": "·ûì",
        "L": "·ûî",
        "M": "·ûï",
        "N": "·ûñ",
        "O": "·ûó",
        "P": "·ûò",
        "Q": "·ûô",
        "R": "·ûö",
        "S": "·ûõ",
        "T": "·ûú",
        "U": "·ûù",
        "V": "·ûû",
        "W": "·ûü",
        "X": "·û†",
        "Y": "·û°",
        "Z": "·û¢"

    };

    const lettersv2 = {
        "a": "ÿß",
        "b": "ÿ®",
        "c": "ÿ™",
        "d": "ÿ´",
        "e": "ÿ¨",
        "f": "ÿ≠",
        "g": "ÿÆ",
        "h": "ÿØ",
        "i": "ÿ∞",
        "j": "ÿ±",
        "k": "ÿ≤",
        "l": "ÿ≥",
        "m": "ÿ¥",
        "n": "ÿµ",
        "o": "ÿ∂",
        "p": "ÿ∑",
        "q": "ÿ∏",
        "r": "ÿπ",
        "s": "ÿ∫",
        "t": "ŸÅ",
        "u": "ŸÇ",
        "v": "ŸÉ",
        "w": "ŸÑ",
        "x": "ŸÖ",
        "y": "ŸÜ",
        "z": "Ÿá",
        ":": "Ÿà",
        " ": "Ÿâ",
        "0": "Ÿä",
        "1": "Ÿ†",
        "2": "Ÿ°",
        "3": "Ÿ¢",
        "4": "Ÿ£",
        "5": "Ÿ§",
        "6": "Ÿ•",
        "7": "Ÿ¶",
        "8": "Ÿß",
        "9": "Ÿ®",
        "!": "Ÿ©",
        "@": "Ÿ™",
        "#": "Ÿ´",
        "$": "Ÿ¨",
        "%": "Ÿ≠",
        "^": "ŸÆ",
        "&": "ŸØ",
        "*": "Ÿ∞",
        "(": "Ÿ±",
        ")": "Ÿ≤",
        "-": "Ÿ≥",
        "=": "Ÿ¥",
        "+": "Ÿµ",
        "[": "Ÿ∂",
        "]": "Ÿ∑",
        "{": "Ÿ∏",
        "}": "Ÿπ",
        ";": "Ÿ∫",
        "'": "Ÿª",
        ",": "Ÿº",
        ".": "ŸΩ",
        "<": "Ÿæ",
        ">": "Ÿø",
        "/": "⁄Ä",
        "?": "⁄Å",
        "`": "⁄Ç",
        "~": "⁄É",
        "A": "⁄Ñ",
        "B": "⁄Ö",
        "C": "⁄Ü",
        "D": "⁄á",
        "E": "⁄à",
        "F": "⁄â",
        "G": "⁄ä",
        "H": "⁄ã",
        "I": "⁄å",
        "J": "⁄ç",
        "K": "⁄é",
        "L": "⁄è",
        "M": "⁄ê",
        "N": "⁄ë",
        "O": "⁄í",
        "P": "⁄ì",
        "Q": "⁄î",
        "R": "⁄ï",
        "S": "⁄ñ",
        "T": "⁄ó",
        "U": "⁄ò",
        "V": "⁄ô",
        "W": "⁄ö",
        "X": "⁄õ",
        "Y": "⁄ú",
        "Z": "⁄ù"
    };

    let letters;

    if (kind === "sent") {
        letters = version === 1 ? lettersv1 : lettersv2;
    } else {
        letters = text.split("").some(char => Object.values(lettersv2).includes(char)) ? lettersv2 : lettersv1;
    }

    if (kind === "sent") {
        const translatedText = text
            .split(" ")
            .map(word => {
                // Ignore links and words that start with '!'
                if (word.startsWith("http") || word.startsWith("!")) {
                    return word.replace("!", "");
                }
                // Translate other words
                return word.split("").map(char => letters[char] || char).join("");
            })
            .join(" ");
        return {
            src: kind,
            text: translatedText
        };
    }

    const reversedLetters = Object.entries(letters).reduce((acc, [key, value]) => ({ ...acc, [value as string]: key }), {});
    const translatedText = text
        .split(" ")
        .map(word => {
            // Ignore links and words that start with '!'
            if (word.startsWith("http") || word.startsWith("!")) {
                return word;
            }
            // Translate other words
            return word.split("").map(char => reversedLetters[char] || char).join("");
        })
        .join(" ");
    return {
        src: kind,
        text: translatedText
    };
}
